{
    "contents" : "---\ntitle: \"Practical Machine Learning Prediction Assignment\"\nauthor: \"Rosalind\"\ndate: \"22 March 2015\"\noutput: html_document\n---\n\n## Synopsis: \n\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. \n\nAim: The overarching aim of this assignment is to predict the manner in which 6 participants exercise based on the data from accelerometers on the belt, forearm, arm and dumbell. To find out the patterns in their behaviour and quantify how much of a particular actiivity they do. \n\nData source: http://groupware.les.inf.puc-rio.br/har (Weight Lifting Exercise Dataset) \n\n\n#### Load libraries and setup working directory\n\n```r\nrm(list = ls(all = TRUE))\n\nsetwd('/PracticalMachineLearning/Data/PracticalMachineLearning')\n\nlibrary(caret)\n\ntrainingRaw <- read.csv(file=\"pml-training.csv\", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))\ntestingRaw <- read.csv(file=\"pml-testing.csv\", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))\n\ntrainingRaw$classe <- as.factor(trainingRaw$classe)  \n```\n\n#### Examine the data\n\n```\n## 'data.frame':  19622 obs. of  160 variables:\n##  $ X                       : chr  \"1\" \"2\" \"3\" \"4\" ...\n##  $ user_name               : chr  \"carlitos\" \"carlitos\" \"carlitos\" \"carlitos\" ...\n##  $ raw_timestamp_part_1    : int  1323084231 1323084231 1323084231 1323084232 1323084232 1323084232 1323084232 1323084232 1323084232 1323084232 ...\n##  $ raw_timestamp_part_2    : int  788290 808298 820366 120339 196328 304277 368296 440390 484323 484434 ...\n##  $ cvtd_timestamp          : chr  \"05/12/2011 11:23\" \"05/12/2011 11:23\" \"05/12/2011 11:23\" \"05/12/2011 11:23\" ...\n##  $ new_window              : chr  \"no\" \"no\" \"no\" \"no\" ...\n##  $ num_window              : int  11 11 11 12 12 12 12 12 12 12 ...\n##  $ roll_belt               : num  1.41 1.41 1.42 1.48 1.48 1.45 1.42 1.42 1.43 1.45 ...\n##  $ pitch_belt              : num  8.07 8.07 8.07 8.05 8.07 8.06 8.09 8.13 8.16 8.17 ...\n##  $ yaw_belt                : num  -94.4 -94.4 -94.4 -94.4 -94.4 -94.4 -94.4 -94.4 -94.4 -94.4 ...\n##  $ total_accel_belt        : int  3 3 3 3 3 3 3 3 3 3 ...\n##  $ kurtosis_roll_belt      : chr  \"\" \"\" \"\" \"\" ...\n##  $ kurtosis_picth_belt     : chr  \"\" \"\" \"\" \"\" ...\n##  $ kurtosis_yaw_belt       : chr  \"\" \"\" \"\" \"\" ...\n##  $ skewness_roll_belt      : chr  \"\" \"\" \"\" \"\" ...\n##  $ skewness_roll_belt.1    : chr  \"\" \"\" \"\" \"\" ...\n##  $ skewness_yaw_belt       : chr  \"\" \"\" \"\" \"\" ...\n##  $ max_roll_belt           : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ max_picth_belt          : int  NA NA NA NA NA NA NA NA NA NA ...\n##  $ max_yaw_belt            : chr  \"\" \"\" \"\" \"\" ...\n##  $ min_roll_belt           : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ min_pitch_belt          : int  NA NA NA NA NA NA NA NA NA NA ...\n##  $ min_yaw_belt            : chr  \"\" \"\" \"\" \"\" ...\n##  $ amplitude_roll_belt     : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ amplitude_pitch_belt    : int  NA NA NA NA NA NA NA NA NA NA ...\n##  $ amplitude_yaw_belt      : chr  \"\" \"\" \"\" \"\" ...\n##  $ var_total_accel_belt    : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ avg_roll_belt           : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ stddev_roll_belt        : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ var_roll_belt           : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ avg_pitch_belt          : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ stddev_pitch_belt       : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ var_pitch_belt          : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ avg_yaw_belt            : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ stddev_yaw_belt         : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ var_yaw_belt            : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ gyros_belt_x            : num  0 0.02 0 0.02 0.02 0.02 0.02 0.02 0.02 0.03 ...\n##  $ gyros_belt_y            : num  0 0 0 0 0.02 0 0 0 0 0 ...\n##  $ gyros_belt_z            : num  -0.02 -0.02 -0.02 -0.03 -0.02 -0.02 -0.02 -0.02 -0.02 0 ...\n##  $ accel_belt_x            : int  -21 -22 -20 -22 -21 -21 -22 -22 -20 -21 ...\n##  $ accel_belt_y            : int  4 4 5 3 2 4 3 4 2 4 ...\n##  $ accel_belt_z            : int  22 22 23 21 24 21 21 21 24 22 ...\n##  $ magnet_belt_x           : int  -3 -7 -2 -6 -6 0 -4 -2 1 -3 ...\n##  $ magnet_belt_y           : int  599 608 600 604 600 603 599 603 602 609 ...\n##  $ magnet_belt_z           : int  -313 -311 -305 -310 -302 -312 -311 -313 -312 -308 ...\n##  $ roll_arm                : num  -128 -128 -128 -128 -128 -128 -128 -128 -128 -128 ...\n##  $ pitch_arm               : num  22.5 22.5 22.5 22.1 22.1 22 21.9 21.8 21.7 21.6 ...\n##  $ yaw_arm                 : num  -161 -161 -161 -161 -161 -161 -161 -161 -161 -161 ...\n##  $ total_accel_arm         : int  34 34 34 34 34 34 34 34 34 34 ...\n##  $ var_accel_arm           : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ avg_roll_arm            : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ stddev_roll_arm         : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ var_roll_arm            : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ avg_pitch_arm           : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ stddev_pitch_arm        : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ var_pitch_arm           : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ avg_yaw_arm             : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ stddev_yaw_arm          : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ var_yaw_arm             : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ gyros_arm_x             : num  0 0.02 0.02 0.02 0 0.02 0 0.02 0.02 0.02 ...\n##  $ gyros_arm_y             : num  0 -0.02 -0.02 -0.03 -0.03 -0.03 -0.03 -0.02 -0.03 -0.03 ...\n##  $ gyros_arm_z             : num  -0.02 -0.02 -0.02 0.02 0 0 0 0 -0.02 -0.02 ...\n##  $ accel_arm_x             : int  -288 -290 -289 -289 -289 -289 -289 -289 -288 -288 ...\n##  $ accel_arm_y             : int  109 110 110 111 111 111 111 111 109 110 ...\n##  $ accel_arm_z             : int  -123 -125 -126 -123 -123 -122 -125 -124 -122 -124 ...\n##  $ magnet_arm_x            : int  -368 -369 -368 -372 -374 -369 -373 -372 -369 -376 ...\n##  $ magnet_arm_y            : int  337 337 344 344 337 342 336 338 341 334 ...\n##  $ magnet_arm_z            : int  516 513 513 512 506 513 509 510 518 516 ...\n##  $ kurtosis_roll_arm       : chr  \"\" \"\" \"\" \"\" ...\n##  $ kurtosis_picth_arm      : chr  \"\" \"\" \"\" \"\" ...\n##  $ kurtosis_yaw_arm        : chr  \"\" \"\" \"\" \"\" ...\n##  $ skewness_roll_arm       : chr  \"\" \"\" \"\" \"\" ...\n##  $ skewness_pitch_arm      : chr  \"\" \"\" \"\" \"\" ...\n##  $ skewness_yaw_arm        : chr  \"\" \"\" \"\" \"\" ...\n##  $ max_roll_arm            : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ max_picth_arm           : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ max_yaw_arm             : int  NA NA NA NA NA NA NA NA NA NA ...\n##  $ min_roll_arm            : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ min_pitch_arm           : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ min_yaw_arm             : int  NA NA NA NA NA NA NA NA NA NA ...\n##  $ amplitude_roll_arm      : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ amplitude_pitch_arm     : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ amplitude_yaw_arm       : int  NA NA NA NA NA NA NA NA NA NA ...\n##  $ roll_dumbbell           : num  13.1 13.1 12.9 13.4 13.4 ...\n##  $ pitch_dumbbell          : num  -70.5 -70.6 -70.3 -70.4 -70.4 ...\n##  $ yaw_dumbbell            : num  -84.9 -84.7 -85.1 -84.9 -84.9 ...\n##  $ kurtosis_roll_dumbbell  : chr  \"\" \"\" \"\" \"\" ...\n##  $ kurtosis_picth_dumbbell : chr  \"\" \"\" \"\" \"\" ...\n##  $ kurtosis_yaw_dumbbell   : chr  \"\" \"\" \"\" \"\" ...\n##  $ skewness_roll_dumbbell  : chr  \"\" \"\" \"\" \"\" ...\n##  $ skewness_pitch_dumbbell : chr  \"\" \"\" \"\" \"\" ...\n##  $ skewness_yaw_dumbbell   : chr  \"\" \"\" \"\" \"\" ...\n##  $ max_roll_dumbbell       : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ max_picth_dumbbell      : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ max_yaw_dumbbell        : chr  \"\" \"\" \"\" \"\" ...\n##  $ min_roll_dumbbell       : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ min_pitch_dumbbell      : num  NA NA NA NA NA NA NA NA NA NA ...\n##  $ min_yaw_dumbbell        : chr  \"\" \"\" \"\" \"\" ...\n##  $ amplitude_roll_dumbbell : num  NA NA NA NA NA NA NA NA NA NA ...\n##   [list output truncated]\n```\n\n#### Data Exploration\n\nAfter investigating the variables in the dataset, Belt, arm, dumbbell, and forearm variables that do not have any missing values in the test dataset will be **predictor candidates**\n\n\n```r\nNAindex <- apply(trainingRaw,2,function(x) {sum(is.na(x))}) \ntrainingRaw <- trainingRaw[,which(NAindex == 0)]\nNAindex <- apply(testingRaw,2,function(x) {sum(is.na(x))}) \ntestingRaw <- testingRaw[,which(NAindex == 0)]\n```\n#### Preprocessing variables\n\n```r\nv <- which(lapply(trainingRaw, class) %in% \"numeric\")\n\npreObj <-preProcess(trainingRaw[,v],method=c('knnImpute', 'center', 'scale'))\ntrainLess1 <- predict(preObj, trainingRaw[,v])\ntrainLess1$classe <- trainingRaw$classe\n\ntestLess1 <-predict(preObj,testingRaw[,v])\n```\n#### Removing the non zero variables\nRemoving the variables with values near zero, that means that they have not so much meaning in the predictions\n\n```r\nnzv <- nearZeroVar(trainLess1,saveMetrics=TRUE)\ntrainLess1 <- trainLess1[,nzv$nzv==FALSE]\n\nnzv <- nearZeroVar(testLess1,saveMetrics=TRUE)\ntestLess1 <- testLess1[,nzv$nzv==FALSE]\n```\n\n#### Create cross validation set\nThe training set is divided in two parts, one for training and the other for cross validation\n\n\n```r\nset.seed(12031987)\n\ninTrain = createDataPartition(trainLess1$classe, p = 3/4, list=FALSE)\ntraining = trainLess1[inTrain,]\ncrossValidation = trainLess1[-inTrain,]\n```\n\n#### Train model\nTrain model with random forest due to its highly accuracy rate. The model is build on a training set of 28 variables from the initial 160. Cross validation is used as train control method.\n\n```r\nmodFit <- train(classe ~., method=\"rf\", data=train, trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )\n```\n````\n## Time difference of 13.05325 mins\n\n## Random Forest \n## \n## 14718 samples\n##    27 predictors\n##     5 classes: 'A', 'B', 'C', 'D', 'E' \n## \n## No pre-processing\n## Resampling: Cross-Validated (10 fold) \n## \n## Summary of sample sizes: 13246, 13245, 13248, 13245, 13247, 13246, ... \n## \n## Resampling results across tuning parameters:\n## \n##   mtry  Accuracy  Kappa  Accuracy SD  Kappa SD\n##   2     0.993     0.991  0.00116      0.00147 \n##   14    0.992     0.99   0.0028       0.00354 \n##   27    0.989     0.987  0.00353      0.00446 \n## \n## Accuracy was used to select the optimal model using  the largest value.\n## The final value used for the model was mtry = 2.  \n````\n\n#### Accuracy on training set and cross validation set\nFollowing the computation on the accuracy of trainig and cross validation set\n\nTraining set:\n\n```r\ntrainingPred <- predict(modFit, training)\nconfusionMatrix(trainingPred, training$classe)\n```\n````\nConfusion Matrix and Statistics\n\n          Reference\nPrediction    A    B    C    D    E\n         A 4185    0    0    0    0\n         B    0 2848    0    0    0\n         C    0    0 2567    0    0\n         D    0    0    0 2412    0\n         E    0    0    0    0 2706\n\nOverall Statistics\n                                     \n               Accuracy : 1          \n                 95% CI : (0.9997, 1)\n    No Information Rate : 0.2843     \n    P-Value [Acc > NIR] : < 2.2e-16  \n                                     \n                  Kappa : 1          \n Mcnemar's Test P-Value : NA         \n\nStatistics by Class:\n\n                     Class: A Class: B Class: C Class: D Class: E\nSensitivity            1.0000   1.0000   1.0000   1.0000   1.0000\nSpecificity            1.0000   1.0000   1.0000   1.0000   1.0000\nPos Pred Value         1.0000   1.0000   1.0000   1.0000   1.0000\nNeg Pred Value         1.0000   1.0000   1.0000   1.0000   1.0000\nPrevalence             0.2843   0.1935   0.1744   0.1639   0.1839\nDetection Rate         0.2843   0.1935   0.1744   0.1639   0.1839\nDetection Prevalence   0.2843   0.1935   0.1744   0.1639   0.1839\nBalanced Accuracy      1.0000   1.0000   1.0000   1.0000   1.0000\n````\n\nCross validation set\n\n```r\ncvPred <- predict(modFit, crossValidation)\nconfusionMatrix(cvPred, crossValidation$classe)\n```\n````\nConfusion Matrix and Statistics\n\n          Reference\nPrediction    A    B    C    D    E\n         A 1392    3    0    0    0\n         B    2  944    2    0    0\n         C    0    2  852    3    0\n         D    0    0    1  801    3\n         E    1    0    0    0  898\n\nOverall Statistics\n                                         \n               Accuracy : 0.9965         \n                 95% CI : (0.9945, 0.998)\n    No Information Rate : 0.2845         \n    P-Value [Acc > NIR] : < 2.2e-16      \n                                         \n                  Kappa : 0.9956         \n Mcnemar's Test P-Value : NA             \n\nStatistics by Class:\n\n                     Class: A Class: B Class: C Class: D Class: E\nSensitivity            0.9978   0.9947   0.9965   0.9963   0.9967\nSpecificity            0.9991   0.9990   0.9988   0.9990   0.9998\nPos Pred Value         0.9978   0.9958   0.9942   0.9950   0.9989\nNeg Pred Value         0.9991   0.9987   0.9993   0.9993   0.9993\nPrevalence             0.2845   0.1935   0.1743   0.1639   0.1837\nDetection Rate         0.2838   0.1925   0.1737   0.1633   0.1831\nDetection Prevalence   0.2845   0.1933   0.1748   0.1642   0.1833\nBalanced Accuracy      0.9985   0.9969   0.9976   0.9976   0.9982\n````\n\n#### RESULTS\nPredictions on the real testing set\n\n```r\ntestingPred <- predict(modFit, testLess1)\ntestingPred\n```\n````\n [1] B A B A A E D B A A B C B A E E A B B B\n````",
    "created" : 1427065186248.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3675203897",
    "id" : "32C40949",
    "lastKnownWriteTime" : 1427065099,
    "path" : "~/PracticalMachineLearning/Data/project.Rmd",
    "project_path" : "project.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}